/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package machine.view;

import java.awt.Dimension;
import machine.model.TextEditor;
import java.awt.EventQueue;
import java.awt.GraphicsEnvironment;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JTextArea;
import javax.swing.text.JTextComponent;

/**
 * Program: Text Editor Panel
 * 
 * Purpose: Creates a panel that acts as a Text Editor
 * 
 * @author: jl948836
 * 
 * date/ver: 03/25/16 1.0.0
 */

/** 
 * Change Log
 * 
 * mv935583 -> Matthew Vertefeuille
 * # author   - date:     description
 * 1 mv935583   04/07/16: Implemented theme selector backend for GUI
 * 
 * 2 mv935583 - 04/11/16: Finalized backend for theme selected on GUI, also 
 *                        uncoupled the font name, size, and theme actions so
 *                        each one behaves independently.
 * 
 * 3 jl948836 - 04/26/16: Updated Split Join state of hidden editor.
 *
 * 4 jl948836 - 04/26/16: Join Editor now resets size to default size.
 */
@SuppressWarnings("serial")
public class TextEditorPanel extends javax.swing.JPanel {

    private String[] fontNames = null;
    Integer[] SIZES = { 8, 9, 10, 11, 12, 14, 16, 18, 20,
        22, 24, 26, 28, 36, 48, 72 }; //the sizes for the font size combo box. MB
    String[] THEMES = { "Black on White", "Green on Black", "Blue on Black", "Red on Black", 
        "White on Black", "Black on Light-Yellow"}; //CHANGE LOG: 1
    private MachineView machineView;
    private TextEditorFrame editorWindow;
    private TextEditor editorWindowTextEditor;
    private TextEditorPanel editorWindowTextEditorPanel;
    private int fontStarterIndex;
    
    /**
     * Creates new form TextEditorPanel
     */
    public TextEditorPanel() {
        initComponents();
    }
    
    /**
     * Creates the Text Editor for a single Frame/Window
     * 
     * @param machineView 
     */
    public TextEditorPanel(MachineView machineView) {
        this.machineView = machineView;
        initComponents();
    }
    
    /**
     * Creates the Text Editor for multiple Frames/Windows
     * 
     * @param machineView
     * @param editorWindow 
     */
    public TextEditorPanel(MachineView machineView, TextEditorFrame editorWindow) {
        this.machineView = machineView;
        this.editorWindow = editorWindow;
        initComponents();
    }

    /**
     * Get a reference to the Error Display
     * 
     * @return 
     */
    public JTextArea getSyntaxErrorTextArea(){
        return syntaxErrorDisplay;
    }
    
    /**
     * Displays the error List after the user presses the Assemble button
     * 
     * @param errorList
     */
    public void setErrorText(ArrayList<String> errorList) {
        String errorText = "";
        for (String error : errorList){
                errorText += error + "\n";
        }
        syntaxErrorDisplay.setText(errorText);
    }
    
    /**
     * Get reference to Text Editor Text Area
     * 
     * @return 
     */
    public JTextComponent getEditorPane() {
        return textEditor.getTextPane();
    }
    
    /**
     * Get the text in the Text Editor Text Area
     * 
     * @return 
     */
    public String getEditorText() {
        return textEditor.getText();
    }
    
    /**
     * Get reference to the Editor window.
     * 
     * @return 
     */
    public TextEditorFrame getTextEditorFrame() {
        return editorWindow;
    }
    
    /**
     * Get reference to the Text Editor
     * 
     * @return 
     */
    public TextEditor getTextEditor() {
        return textEditor;
    }
    
    /**
     * Get reference to the Split/Join Button
     * 
     * @return 
     */
    public JButton getSplitJoinButton() {
        return splitJoinButton;
    }
    
    /**
     * Get a list of the available fonts from the Graphics Environment
     * 
     * @return 
     */
    protected String[] getFontNames()
    // Will get the all the avalilable texts from the system.
    // Programmer: Mariela Barrera
    {
        if (fontNames == null)
        {
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            //GraphicsConfiguration.
            fontNames = env.getAvailableFontFamilyNames();
        }
        
        for (int i = 0; i < fontNames.length; i++) {
            if (fontNames[i].equals("Arial")){
                fontStarterIndex = i;
            }        
        }
        return fontNames;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        textEditorControlsPanel = new javax.swing.JPanel();
        fontLabel = new javax.swing.JLabel();
        fontComboBox = new javax.swing.JComboBox(getFontNames());
        fontSizeLabel = new javax.swing.JLabel();
        fontSizeComboBox = new javax.swing.JComboBox(SIZES);
        splitJoinButton = new javax.swing.JButton();
        schemeLabel = new javax.swing.JLabel();
        fontThemeComboBox = new javax.swing.JComboBox();
        textEditorPanel = new javax.swing.JPanel();
        textEditor = new machine.model.TextEditor();
        errorDisplayScrollPanel = new javax.swing.JScrollPane();
        syntaxErrorDisplay = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        textEditorControlsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Text Editor Controls"));
        textEditorControlsPanel.setLayout(new java.awt.GridBagLayout());

        fontLabel.setText("Font:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        textEditorControlsPanel.add(fontLabel, gridBagConstraints);

        fontComboBox.setSelectedIndex(fontStarterIndex);
        fontComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        textEditorControlsPanel.add(fontComboBox, gridBagConstraints);

        fontSizeLabel.setText("Font Size:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        textEditorControlsPanel.add(fontSizeLabel, gridBagConstraints);

        fontSizeComboBox.setSelectedIndex(5);
        fontSizeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSizeComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        textEditorControlsPanel.add(fontSizeComboBox, gridBagConstraints);

        splitJoinButton.setText("Split Editor");
        splitJoinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitJoinButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        textEditorControlsPanel.add(splitJoinButton, gridBagConstraints);

        schemeLabel.setText("Scheme: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        textEditorControlsPanel.add(schemeLabel, gridBagConstraints);
        schemeLabel.getAccessibleContext().setAccessibleName("");

        fontThemeComboBox.setModel(new javax.swing.DefaultComboBoxModel(THEMES));
        fontThemeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontThemeComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        textEditorControlsPanel.add(fontThemeComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        add(textEditorControlsPanel, gridBagConstraints);

        textEditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Text Editor"));

        javax.swing.GroupLayout textEditorPanelLayout = new javax.swing.GroupLayout(textEditorPanel);
        textEditorPanel.setLayout(textEditorPanelLayout);
        textEditorPanelLayout.setHorizontalGroup(
            textEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
        );
        textEditorPanelLayout.setVerticalGroup(
            textEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.7;
        add(textEditorPanel, gridBagConstraints);

        errorDisplayScrollPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Syntax Errors"));

        syntaxErrorDisplay.setEditable(false);
        syntaxErrorDisplay.setColumns(20);
        syntaxErrorDisplay.setForeground(new java.awt.Color(250, 0, 0));
        syntaxErrorDisplay.setRows(5);
        errorDisplayScrollPanel.setViewportView(syntaxErrorDisplay);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.2;
        add(errorDisplayScrollPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void fontComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontComboBoxActionPerformed
        String name = (String) fontComboBox.getSelectedItem();  //BEGIN CHANGE LOG: 2
        textEditor.setFontName(name);
    }//GEN-LAST:event_fontComboBoxActionPerformed

    private void fontSizeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSizeComboBoxActionPerformed
        int size = (int) fontSizeComboBox.getSelectedItem();
        textEditor.setFontSize(size);   //END CHANGE LOG: 2
    }//GEN-LAST:event_fontSizeComboBoxActionPerformed

    private void splitJoinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitJoinButtonActionPerformed
        final String codeInEditor = getEditorText();
        
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (splitJoinButton.getText().equals("Split Editor")) {
                    splitJoinButton.setText("Join Editor");
                    editorWindow = new TextEditorFrame(machineView);
                    editorWindowTextEditorPanel = editorWindow.getTextEditorPanel();
                    editorWindowTextEditor = editorWindowTextEditorPanel.getTextEditor();
                    editorWindow.getEditorPane().setText(codeInEditor);
                    machineView.getTextEditorPanel().setVisible(false);
                    editorWindow.getErrorPane().setVisible(false);
                    machineView.setTitle("WALL - Machine Window");
                    editorWindow.setTitle("WALL - Text Editor Window");
                    editorWindowTextEditor.setTextPaneFont(textEditor.getFont());
                    editorWindowTextEditorPanel.fontComboBox.setSelectedIndex(fontComboBox.getSelectedIndex());
                    editorWindowTextEditorPanel.fontSizeComboBox.setSelectedIndex(fontSizeComboBox.getSelectedIndex());
                    editorWindowTextEditor.setBackGround(textEditor.getBackGroundString());
                    editorWindowTextEditor.setTextColor(textEditor.getTextColorString());
                    editorWindowTextEditorPanel.fontThemeComboBox.setSelectedIndex(fontThemeComboBox.getSelectedIndex());
                    editorWindowTextEditor.setTextPaneFont(textEditor.getFont());
                    machineView.pack();
                    editorWindow.pack();
                    //Dimension stuff = machineView.getPreferredSize();
                    //editorWindow.setLocation((int) (stuff.getHeight()/.85 + stuff.getHeight()/2), (int) (stuff.getWidth()/.85 + stuff.getWidth()/2));
                    editorWindow.setLocationRelativeTo(machineView);
                    editorWindow.setVisible(true);
                    
                }
                else { //Join Editor
                    machineView.getTextEditorPanel().getSplitJoinButton().setText("Split Editor"); //CHANGE LOG: 3
                    machineView.setTitle("WALL - Machine Simulator");
                    machineView.getTextEditorPanel().getEditorPane().setText(codeInEditor);
                    machineView.getTextEditorPanel().getTextEditor().setTextPaneFont(editorWindow.getTextEditorPanel().getTextEditor().getFont());
                    machineView.getTextEditorPanel().getTextEditor().setBackGround(editorWindow.getTextEditorPanel().getTextEditor().getBackGroundString());
                    machineView.getTextEditorPanel().getTextEditor().setTextColor(editorWindow.getTextEditorPanel().getTextEditor().getTextColorString());
                    machineView.getTextEditorPanel().fontComboBox.setSelectedIndex(editorWindow.getTextEditorPanel().fontComboBox.getSelectedIndex());
                    machineView.getTextEditorPanel().fontSizeComboBox.setSelectedIndex(editorWindow.getTextEditorPanel().fontSizeComboBox.getSelectedIndex());
                    machineView.getTextEditorPanel().fontThemeComboBox.setSelectedIndex(editorWindow.getTextEditorPanel().fontThemeComboBox.getSelectedIndex());
                    machineView.getTextEditorPanel().getTextEditor().setTextPaneFont(editorWindow.getFont());
                    editorWindow.dispose();
                    //CHANGE LOG BEGIN: 4
                    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                    machineView.setPreferredSize(new Dimension((int) ((int) screenSize.width * .85), (int) ((int) screenSize.height * .85)));
                    //CHANGE LOG END: 4
                    machineView.getTextEditorPanel().setVisible(true);
                    machineView.pack();
                    
                    
                }
            }
        });
    }//GEN-LAST:event_splitJoinButtonActionPerformed

    private void fontThemeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontThemeComboBoxActionPerformed
        int themeNumber = fontThemeComboBox.getSelectedIndex(); //BEGIN CHANGE LOG: 2
        String textColor, backGroundColor;
        switch (themeNumber){
            case 1:
                textColor = "GREEN";
                backGroundColor = "BLACK";
                break;
            case 2:
                textColor = "BLUE";
                backGroundColor = "BLACK";
                break;
            case 3:
                textColor = "RED";
                backGroundColor = "BLACK";
                break;
            case 4:
                textColor = "WHITE";
                backGroundColor = "BLACK";
                break;
            case 0:
                textColor = "BLACK";
                backGroundColor = "WHITE";
                break;
            case 5:
                textColor = "BLACK";
                backGroundColor = "LIGHT-YELLOW";
                break;
            default:
                textColor = "BLACK";
                backGroundColor = "WHITE";
                break;
        }
               
        this.textEditor.setTextColor(textColor);
        this.textEditor.setBackGround(backGroundColor);  //END CHANGE LOG: 2
    }//GEN-LAST:event_fontThemeComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JScrollPane errorDisplayScrollPanel;
    public javax.swing.JComboBox fontComboBox;
    private javax.swing.JLabel fontLabel;
    public javax.swing.JComboBox fontSizeComboBox;
    private javax.swing.JLabel fontSizeLabel;
    private javax.swing.JComboBox fontThemeComboBox;
    private javax.swing.JLabel schemeLabel;
    public javax.swing.JButton splitJoinButton;
    public javax.swing.JTextArea syntaxErrorDisplay;
    public machine.model.TextEditor textEditor;
    public javax.swing.JPanel textEditorControlsPanel;
    public javax.swing.JPanel textEditorPanel;
    // End of variables declaration//GEN-END:variables
}
